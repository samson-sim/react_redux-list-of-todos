{"version":3,"sources":["store/index.ts","components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["LOAD_TODOS","SET_USER_ID","LOAD_SELECTED_USER","SET_IS_USER_VALID","SET_FILTER_TITLE","SET_FILTER_STATUS","defaultState","todos","selectedUserId","selectedUser","id","name","email","phone","isUserValid","filterByTitle","filterByStatus","selectUserIdAction","value","type","loadTodosAction","store","createStore","state","action","composeWithDevTools","applyMiddleware","thunk","TodoList","dispatch","useDispatch","className","map","todo","classNames","completed","htmlFor","checked","onChange","todoCopy","changeTodoStatus","title","onClick","userId","getUser","fetch","then","response","json","CurrentUser","useSelector","user","useEffect","App","filterByStatusResult","status","visibleTodos","filter","includes","event","target","ReactDOM","render","document","getElementById"],"mappings":"sVAoBMA,EAAa,aACbC,EAAc,cACdC,EAAqB,qBACrBC,EAAoB,oBACpBC,EAAmB,mBACnBC,EAAoB,oBAEpBC,EAAsB,CAC1BC,MAAO,GACPC,eAAgB,EAChBC,aAAc,CACZC,GAAI,EACJC,KAAM,GACNC,MAAO,GACPC,MAAO,IAETC,aAAa,EACbC,cAAe,GACfC,eAAgB,IAgCLC,EAAqB,SAACC,GAAD,MAAoB,CAAEC,KAAMlB,EAAaiB,UAC9DE,EAAkB,SAACF,GAAD,MAAoB,CAAEC,KAAMnB,EAAYkB,UAKjEG,EAAQC,uBAnCE,WAAkD,IAAjDC,EAAgD,uDAAxCjB,EAAckB,EAA0B,uCAC/D,OAAQA,EAAOL,MACb,KAAKnB,EACH,OAAO,2BACFuB,GADL,IAEEhB,MAAM,YAAKiB,EAAON,SAGtB,KAAKjB,EACH,OAAO,2BAAKsB,GAAZ,IAAmBf,eAAgBgB,EAAON,QAE5C,KAAKhB,EACH,OAAO,2BAAKqB,GAAZ,IAAmBd,aAAa,eAAMe,EAAON,SAE/C,KAAKf,EACH,OAAO,2BAAKoB,GAAZ,IAAmBT,YAAaU,EAAON,QAEzC,KAAKd,EACH,OAAO,2BAAKmB,GAAZ,IAAmBR,cAAeS,EAAON,QAE3C,KAAKb,EACH,OAAO,2BAAKkB,GAAZ,IAAmBP,eAAgBQ,EAAON,QAE5C,QACE,OAAO,eAAKK,MAWiBE,8BAAoBC,0BAAgBC,OAExDN,I,OCnEFO,EAA4B,SAAC,GAAe,IAAbrB,EAAY,EAAZA,MACpCsB,EAAWC,cAkBjB,OACE,sBAAKC,UAAU,WAAf,UACE,wCAEA,qBAAKA,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGxB,EAAMyB,KAAI,SAAAC,GAAI,OACb,qBAEEF,UAAWG,IAAW,iBAAkB,CACtC,6BAA8BD,EAAKE,UACnC,0BAA2BF,EAAKE,YAJpC,UAOE,wBAAOC,QAAO,UAAKH,EAAKvB,IAAxB,UACE,uBACES,KAAK,WACLT,GAAE,UAAKuB,EAAKvB,IACZ2B,QAASJ,EAAKE,UACdG,SAAU,kBA/BD,SAAC5B,GACxB,IAAM6B,EAAWhC,EAAMyB,KAAI,SAAAC,GACzB,OAAIA,EAAKvB,KAAOA,EACP,2BAAKuB,GAAZ,IAAkBE,WAAYF,EAAKE,YAG9BF,KAGTJ,EAAST,EAAgBmB,IAsBKC,CAAiBP,EAAKvB,OAExC,4BAAIuB,EAAKQ,WAGX,yBACEV,UAAU,iEAKVZ,KAAK,SACLuB,QAAS,kBA/CHC,EA+CoBV,EAAKU,YA9C3Cd,EAASZ,EAAmB0B,IADX,IAACA,GAwCR,sBAUGV,EAAKU,YA1BHV,EAAKvB,e,MC1BjB,SAASkC,EAAQD,GACtB,OAAO,SAAUd,GACfgB,MAAM,2CAAD,OAA4CF,IAC9CG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAInB,EFqDoC,CAAEV,KAAMjB,EAAoBgB,MErDhC8B,QCV7C,IAAMC,EAAwB,WACnC,IAAMpB,EAAWC,cACXtB,EAAiB0C,aAAY,SAAC3B,GAAD,OAAkBA,EAAMf,kBACrD2C,EAAOD,aAAY,SAAC3B,GAAD,OAAkBA,EAAMd,gBAC3CK,EAAcoC,aAAY,SAAC3B,GAAD,OAAkBA,EAAMT,eAExDsC,qBAAU,WACRvB,EAASe,EAAQpC,MAChB,CAACA,IAMJ,OACE,qBAAKuB,UAAU,cAAf,SACGjB,EAEG,gCACE,oBAAIiB,UAAU,qBAAd,SACE,kDAEGoB,EAAKzC,QAIV,oBAAIqB,UAAU,oBAAd,SAAmCoB,EAAKxC,OACxC,mBAAGoB,UAAU,qBAAb,SAAmCoB,EAAKvC,QACxC,mBAAGmB,UAAU,qBAAb,SAAmCoB,EAAKtC,QACxC,wBAAQkB,UAAU,SAASZ,KAAK,SAASuB,QAnB7B,WACpBb,EAASZ,EAAmB,KAkBpB,sBAGF,mDC2CKoC,EAvEO,WACpB,IAAMxB,EAAWC,cAEXvB,EAAQ2C,aAAY,SAAC3B,GAAD,OAAkBA,EAAMhB,SAE5CS,EAAiBkC,aAAY,SAAC3B,GAAD,OAAkBA,EAAMP,kBAErDD,EAAgBmC,aAAY,SAAC3B,GAAD,OAAkBA,EAAMR,iBAEpDP,EAAiB0C,aAAY,SAAC3B,GAAD,OAAkBA,EAAMf,kBAE3D4C,qBAAU,WACRvB,GFjBK,SAAUA,GACfgB,MAJY,2CAKTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAInB,EAAST,EAAgB4B,YEexC,CAAChC,IAEJ,IAAMsC,EAAuB,SAACC,GAC5B,OAAQA,GACN,IAAK,YACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,QACE,MAAO,QAuBPC,EAAejD,EAAMkD,QAnBC,SAACxB,GAC3B,IAAQQ,EAAqBR,EAArBQ,MAAON,EAAcF,EAAdE,UAEf,MAA6C,QAAzCmB,EAAqBtC,GACfyB,EAAMiB,SAAS3C,GAGjB0B,EAAMiB,SAAS3C,IAClBoB,IAAcmB,EAAqBtC,MAa1C,OACE,sBAAKe,UAAU,MAAf,UACE,sBAAKA,UAAU,eAAf,UACE,gDACA,uBAAOZ,KAAK,OAAOD,MAAOH,EAAeuB,SAdrB,SAACqB,GJ2BM,IAACzC,EI1BhCW,GJ0BgCX,EI1BHyC,EAAMC,OAAO1C,MJ0BS,CAAEC,KAAMf,EAAkBc,cIZzE,yBAAQA,MAAOF,EAAgBsB,SAXR,SAACqB,GJsBI,IAACzC,EIrBjCW,GJqBiCX,EIrBHyC,EAAMC,OAAO1C,MJqBS,CAAEC,KAAMd,EAAmBa,YIX3E,UACE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,SAAd,uBAEF,cAAC,EAAD,CAAUX,MAAOiD,OAGnB,qBAAKzB,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGvB,EACC,cAAC,EAAD,IACE,2BCrEdqD,IAASC,OACP,cAAC,IAAD,CAAUzC,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEF0C,SAASC,eAAe,W","file":"static/js/main.d7f49196.chunk.js","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\ntype Action = {\n  type: string,\n  value: any,\n};\n\nexport type State = {\n  selectedUserId: 0,\n  todos: Todo[],\n  selectedUser: User,\n  isUserValid: boolean,\n  filterByTitle: string,\n  filterByStatus: string,\n};\n\nconst LOAD_TODOS = 'LOAD_TODOS';\nconst SET_USER_ID = 'SET_USER_ID';\nconst LOAD_SELECTED_USER = 'LOAD_SELECTED_USER';\nconst SET_IS_USER_VALID = 'SET_IS_USER_VALID';\nconst SET_FILTER_TITLE = 'SET_FILTER_TITLE';\nconst SET_FILTER_STATUS = 'SET_FILTER_STATUS';\n\nconst defaultState: State = {\n  todos: [],\n  selectedUserId: 0,\n  selectedUser: {\n    id: 0,\n    name: '',\n    email: '',\n    phone: '',\n  },\n  isUserValid: true,\n  filterByTitle: '',\n  filterByStatus: '',\n};\n\nconst reducer = (state = defaultState, action: Action): State => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: [...action.value],\n      };\n\n    case SET_USER_ID:\n      return { ...state, selectedUserId: action.value };\n\n    case LOAD_SELECTED_USER:\n      return { ...state, selectedUser: { ...action.value } };\n\n    case SET_IS_USER_VALID:\n      return { ...state, isUserValid: action.value };\n\n    case SET_FILTER_TITLE:\n      return { ...state, filterByTitle: action.value };\n\n    case SET_FILTER_STATUS:\n      return { ...state, filterByStatus: action.value };\n\n    default:\n      return { ...state };\n  }\n};\n\nexport const loadSelectedUserAction = (value: User) => ({ type: LOAD_SELECTED_USER, value });\nexport const selectUserIdAction = (value: number) => ({ type: SET_USER_ID, value });\nexport const loadTodosAction = (value: Todo[]) => ({ type: LOAD_TODOS, value });\nexport const isUserValidAction = (value: boolean) => ({ type: SET_IS_USER_VALID, value });\nexport const filterByStatusAction = (value: string) => ({ type: SET_FILTER_STATUS, value });\nexport const filterByTitleAction = (value: string) => ({ type: SET_FILTER_TITLE, value });\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\nimport { useDispatch } from 'react-redux';\nimport { loadTodosAction, selectUserIdAction } from '../../store';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const dispatch = useDispatch();\n\n  const selectUser = (userId: number) => {\n    dispatch(selectUserIdAction(userId));\n  };\n\n  const changeTodoStatus = (id: number) => {\n    const todoCopy = todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    });\n\n    dispatch(loadTodosAction(todoCopy));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item', {\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n            >\n              <label htmlFor={`${todo.id}`}>\n                <input\n                  type=\"checkbox\"\n                  id={`${todo.id}`}\n                  checked={todo.completed}\n                  onChange={() => changeTodoStatus(todo.id)}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => selectUser(todo.userId)}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { loadSelectedUserAction, loadTodosAction } from './store';\n\nconst API_URL = 'https://mate.academy/students-api/todos';\n\nexport function getAllTodos() {\n  return function (dispatch: any) {\n    fetch(API_URL)\n      .then(response => response.json())\n      .then(json => dispatch(loadTodosAction(json)));\n  };\n}\n\nexport function getUser(userId: number) {\n  return function (dispatch: any) {\n    fetch(`https://mate.academy/students-api/users/${userId}`)\n      .then(response => response.json())\n      .then(json => dispatch(loadSelectedUserAction(json)));\n  };\n}\n","import React, { useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectUserIdAction, State } from '../../store';\nimport { getUser } from '../../api';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedUserId = useSelector((state: State) => state.selectedUserId);\n  const user = useSelector((state: State) => state.selectedUser);\n  const isUserValid = useSelector((state: State) => state.isUserValid);\n\n  useEffect(() => {\n    dispatch(getUser(selectedUserId));\n  }, [selectedUserId]);\n\n  const clearUserInfo = () => {\n    dispatch(selectUserIdAction(0));\n  };\n\n  return (\n    <div className=\"CurrentUser\">\n      {isUserValid\n        ? (\n          <div>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {user.id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button className=\"button\" type=\"button\" onClick={clearUserInfo}>Clear</button>\n          </div>\n        )\n        : <h1>User not found</h1>}\n    </div>\n  );\n};\n","import React, { ChangeEvent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api';\nimport { filterByStatusAction, filterByTitleAction, State } from './store';\nimport { Todo } from './types/Todo';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const todos = useSelector((state: State) => state.todos);\n\n  const filterByStatus = useSelector((state: State) => state.filterByStatus);\n\n  const filterByTitle = useSelector((state: State) => state.filterByTitle);\n\n  const selectedUserId = useSelector((state: State) => state.selectedUserId);\n\n  useEffect(() => {\n    dispatch(getAllTodos());\n  }, [filterByStatus]);\n\n  const filterByStatusResult = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return true;\n      case 'active':\n        return false;\n      default:\n        return 'all';\n    }\n  };\n\n  const callbackFilterTitle = (todo: Todo) => {\n    const { title, completed } = todo;\n\n    if (filterByStatusResult(filterByStatus) === 'all') {\n      return (title.includes(filterByTitle));\n    }\n\n    return (title.includes(filterByTitle)\n      && completed === filterByStatusResult(filterByStatus));\n  };\n\n  const changeFilterTitle = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterByTitleAction(event.target.value));\n  };\n\n  const changeFilterByStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterByStatusAction(event.target.value));\n  };\n\n  const visibleTodos = todos.filter(callbackFilterTitle);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <span>Filter title</span>\n        <input type=\"text\" value={filterByTitle} onChange={changeFilterTitle} />\n        <select value={filterByStatus} onChange={changeFilterByStatus}>\n          <option value=\"all\">all</option>\n          <option value=\"completed\">completed</option>\n          <option value=\"active\">active</option>\n        </select>\n        <TodoList todos={visibleTodos} />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}